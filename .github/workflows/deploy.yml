name: Deploy AI Vibez - MAXIMUM DEBUG MODE

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: üîç Environment Debug
        run: |
          echo "üîç ENVIRONMENT DEBUG:"
          echo "==================="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Git commit: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF"
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Runner OS: $RUNNER_OS"
          echo "Working directory: $(pwd)"
          echo "Home directory: $HOME"
          echo "User: $(whoami)"
          echo "Date: $(date)"
          echo "Disk usage:"
          df -h
          echo "Memory usage:"
          free -h
          echo "==================="
          
      - name: üîç Repository Debug
        run: |
          echo "üîç REPOSITORY DEBUG:"
          echo "==================="
          echo "Repository structure:"
          find . -type f -name "*.toml" -o -name "*.json" -o -name "package.json" -o -name "*.md" | head -20
          echo ""
          echo "Package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
          echo "Wrangler.toml exists: $(test -f wrangler.toml && echo 'YES' || echo 'NO')"
          echo "Node_modules exists: $(test -d node_modules && echo 'YES' || echo 'NO')"
          echo "Dist directory exists: $(test -d dist && echo 'YES' || echo 'NO')"
          echo "Git status:"
          git status --porcelain || echo "Git status failed"
          echo "==================="
          
      - name: üîç Secrets Availability Debug
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GOOGLE_AI_STUDIO_API_KEY: ${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}
          CLOUDFLARE_AI_GATEWAY_TOKEN: ${{ secrets.CLOUDFLARE_AI_GATEWAY_TOKEN }}
          SECRETS_ENCRYPTION_KEY: ${{ secrets.SECRETS_ENCRYPTION_KEY }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          echo "üîç SECRETS AVAILABILITY DEBUG:"
          echo "=============================="
          echo "CLOUDFLARE_API_TOKEN: $([ -n "$CLOUDFLARE_API_TOKEN" ] && echo 'SET (length: '${#CLOUDFLARE_API_TOKEN}')' || echo 'EMPTY')"
          echo "CLOUDFLARE_ACCOUNT_ID: $([ -n "$CLOUDFLARE_ACCOUNT_ID" ] && echo 'SET (length: '${#CLOUDFLARE_ACCOUNT_ID}')' || echo 'EMPTY')"
          echo "GOOGLE_CLIENT_ID: $([ -n "$GOOGLE_CLIENT_ID" ] && echo 'SET (length: '${#GOOGLE_CLIENT_ID}')' || echo 'EMPTY')"
          echo "GOOGLE_CLIENT_SECRET: $([ -n "$GOOGLE_CLIENT_SECRET" ] && echo 'SET (length: '${#GOOGLE_CLIENT_SECRET}')' || echo 'EMPTY')"
          echo "JWT_SECRET: $([ -n "$JWT_SECRET" ] && echo 'SET (length: '${#JWT_SECRET}')' || echo 'EMPTY')"
          echo "GOOGLE_AI_STUDIO_API_KEY: $([ -n "$GOOGLE_AI_STUDIO_API_KEY" ] && echo 'SET (length: '${#GOOGLE_AI_STUDIO_API_KEY}')' || echo 'EMPTY')"
          echo "CLOUDFLARE_AI_GATEWAY_TOKEN: $([ -n "$CLOUDFLARE_AI_GATEWAY_TOKEN" ] && echo 'SET (length: '${#CLOUDFLARE_AI_GATEWAY_TOKEN}')' || echo 'EMPTY')"
          echo "SECRETS_ENCRYPTION_KEY: $([ -n "$SECRETS_ENCRYPTION_KEY" ] && echo 'SET (length: '${#SECRETS_ENCRYPTION_KEY}')' || echo 'EMPTY')"
          echo "WEBHOOK_SECRET: $([ -n "$WEBHOOK_SECRET" ] && echo 'SET (length: '${#WEBHOOK_SECRET}')' || echo 'EMPTY')"
          echo ""
          echo "Secret format validation:"
          echo "CLOUDFLARE_API_TOKEN format: $(echo "$CLOUDFLARE_API_TOKEN" | grep -q '^[A-Za-z0-9_-]\{40\}$' && echo 'VALID' || echo 'INVALID')"
          echo "GOOGLE_CLIENT_ID format: $(echo "$GOOGLE_CLIENT_ID" | grep -q '\.apps\.googleusercontent\.com$' && echo 'VALID' || echo 'INVALID')"
          echo "GOOGLE_CLIENT_SECRET format: $(echo "$GOOGLE_CLIENT_SECRET" | grep -q '^GOCSPX-' && echo 'VALID' || echo 'INVALID')"
          echo "=============================="
          
      - name: üì¶ NPM Install Debug
        run: |
          echo "üì¶ NPM INSTALL DEBUG:"
          echo "===================="
          echo "Before install - node_modules size:"
          du -sh node_modules 2>/dev/null || echo "node_modules doesn't exist yet"
          echo ""
          echo "Starting npm install..."
          if npm install --verbose; then
            echo "‚úÖ NPM Install succeeded"
          else
            npm_exit_code=$?
            echo "‚ùå NPM Install failed with exit code: $npm_exit_code"
            echo ""
            echo "üìã NPM ERROR LOGS:"
            echo "=================="
            cat ~/.npm/_logs/*.log 2>/dev/null || echo "No NPM logs found"
            echo "=================="
            exit $npm_exit_code
          fi
          echo ""
          echo "After install - node_modules size:"
          du -sh node_modules
          echo "Package count:"
          find node_modules -name package.json | wc -l
          echo "===================="
          
      - name: üèóÔ∏è Build Process Debug
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'
        run: |
          echo "üèóÔ∏è BUILD PROCESS DEBUG:"
          echo "======================="
          echo "Node options: $NODE_OPTIONS"
          echo "Before build - dist directory:"
          ls -la dist/ 2>/dev/null || echo "dist directory doesn't exist yet"
          echo ""
          echo "Starting build process..."
          if npm run build; then
            echo "‚úÖ Build succeeded"
          else
            build_exit_code=$?
            echo "‚ùå Build failed with exit code: $build_exit_code"
            echo ""
            echo "üìã BUILD ERROR DETAILS:"
            echo "======================="
            echo "Checking for build logs..."
            find . -name "*.log" -newer package.json 2>/dev/null | while read logfile; do
              echo "--- Contents of $logfile ---"
              cat "$logfile"
              echo ""
            done
            echo "======================="
            exit $build_exit_code
          fi
          echo ""
          echo "After build - dist directory:"
          ls -la dist/
          echo ""
          echo "Dist directory size:"
          du -sh dist/
          echo ""
          echo "Key files check:"
          echo "_worker.js exists: $(test -f dist/_worker.js && echo 'YES ('$(stat -c%s dist/_worker.js)' bytes)' || echo 'NO')"
          echo "index.html exists: $(test -f dist/index.html && echo 'YES' || echo 'NO')"
          echo "_routes.json exists: $(test -f dist/_routes.json && echo 'YES (will be removed)' || echo 'NO')"
          echo "======================="
          
      - name: üßπ Cloudflare Detection Debug
        run: |
          echo "üßπ CLOUDFLARE DETECTION DEBUG:"
          echo "=============================="
          echo "Before cleanup:"
          echo "_routes.json exists: $(test -f dist/_routes.json && echo 'YES' || echo 'NO')"
          echo "functions/ exists: $(test -d functions && echo 'YES' || echo 'NO')"
          echo ""
          echo "Removing Pages detection files..."
          rm -f dist/_routes.json
          rm -rf functions/
          echo ""
          echo "After cleanup:"
          echo "_routes.json exists: $(test -f dist/_routes.json && echo 'YES' || echo 'NO')"
          echo "functions/ exists: $(test -d functions && echo 'YES' || echo 'NO')"
          echo "=============================="
          
      - name: üîê Wrangler Authentication Debug
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîê WRANGLER AUTHENTICATION DEBUG:"
          echo "================================="
          echo "Wrangler version:"
          npx wrangler --version
          echo ""
          echo "Testing authentication..."
          if npx wrangler whoami; then
            echo "‚úÖ Authentication successful"
          else
            auth_exit_code=$?
            echo "‚ùå Authentication failed with exit code: $auth_exit_code"
            echo ""
            echo "üìã AUTHENTICATION ERROR LOGS:"
            echo "============================="
            find ~/.config/.wrangler/logs/ -name "*.log" 2>/dev/null | while read logfile; do
              echo "--- Contents of $logfile ---"
              cat "$logfile"
              echo ""
            done || echo "No wrangler logs found yet"
            echo "============================="
            echo "This might be expected if tokens aren't set up yet..."
          fi
          echo ""
          echo "Listing D1 databases:"
          if npx wrangler d1 list; then
            echo "‚úÖ D1 list successful"
          else
            echo "‚ö†Ô∏è D1 list failed (might be permissions or no databases)"
          fi
          echo ""
          echo "Checking Workers:"
          if npx wrangler deployments list --name ai-vibez; then
            echo "‚úÖ Worker deployments accessible"
          else
            echo "‚ö†Ô∏è Worker deployments not accessible (might be first deployment)"
          fi
          echo "================================="
          
      - name: üóÑÔ∏è Database Migration Debug
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üóÑÔ∏è DATABASE MIGRATION DEBUG:"
          echo "============================"
          echo "Migration files:"
          ls -la migrations/ || echo "No migrations directory"
          echo ""
          echo "Migration metadata:"
          cat migrations/meta/_journal.json 2>/dev/null || echo "No migration journal found"
          echo ""
          echo "Attempting database migration..."
          if npx wrangler d1 migrations apply ai-vibez-d1 --remote; then
            echo "‚úÖ Migration successful"
          else
            migration_exit_code=$?
            echo "‚ö†Ô∏è Migration failed with exit code: $migration_exit_code"
            echo ""
            echo "üìã MIGRATION ERROR LOGS:"
            echo "========================"
            find ~/.config/.wrangler/logs/ -name "*.log" 2>/dev/null | while read logfile; do
              echo "--- Contents of $logfile ---"
              cat "$logfile"
              echo ""
            done || echo "No migration logs found"
            echo "========================"
            echo ""
            echo "Trying alternative migration approaches..."
            npx wrangler d1 migrations apply --database-id=88c494f1-1236-4ce4-8b60-570776559000 --remote || echo "Alternative migration also failed"
          fi
          echo "============================"
          
      - name: üöÄ DEPLOYMENT WITH FULL ERROR CAPTURE
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üöÄ DEPLOYMENT WITH FULL ERROR CAPTURE:"
          echo "======================================"
          
          # Set maximum wrangler verbosity
          export WRANGLER_LOG=debug
          export DEBUG=*
          
          # Clear any existing log files and create log directory
          mkdir -p ~/.config/.wrangler/logs/
          rm -f ~/.config/.wrangler/logs/*
          
          echo "Pre-deployment configuration check:"
          echo "wrangler.toml content:"
          cat wrangler.toml
          echo ""
          
          echo "Starting deployment with maximum verbosity..."
          if npx wrangler deploy --config wrangler.toml --verbose --compatibility-date=2024-10-02 2>&1; then
            echo "‚úÖ DEPLOYMENT SUCCEEDED!"
            deployment_success=true
          else
            deployment_exit_code=$?
            echo "‚ùå DEPLOYMENT FAILED with exit code: $deployment_exit_code"
            deployment_success=false
            
            echo ""
            echo "üî• IMMEDIATE ERROR ANALYSIS:"
            echo "============================"
            echo "Exit code: $deployment_exit_code"
            echo "Last command: npx wrangler deploy --config wrangler.toml --verbose --compatibility-date=2024-10-02"
            echo "Working directory: $(pwd)"
            echo "Files in current directory:"
            ls -la
            echo ""
            
            echo "üìã WRANGLER ERROR LOGS (COMPLETE):"
            echo "=================================="
            
            # Display all wrangler log files with detailed info
            if ls ~/.config/.wrangler/logs/ >/dev/null 2>&1; then
              echo "Available log files:"
              ls -la ~/.config/.wrangler/logs/
              echo ""
              
              # Display contents of ALL log files
              for logfile in ~/.config/.wrangler/logs/*; do
                if [ -f "$logfile" ]; then
                  echo "üî•üî•üî• CONTENTS OF $logfile üî•üî•üî•"
                  echo "============================================"
                  cat "$logfile"
                  echo "============================================"
                  echo ""
                fi
              done
            else
              echo "‚ùå No wrangler log directory found at ~/.config/.wrangler/logs/"
              echo ""
              echo "Checking alternative log locations:"
              find /home/runner -name "wrangler*.log" -o -name "*.log" | head -10 || echo "No log files found anywhere"
            fi
            
            echo "üîç ADDITIONAL DEBUGGING INFO:"
            echo "============================="
            echo "Environment variables (wrangler-related):"
            env | grep -i wrangler || echo "No wrangler env vars"
            echo ""
            echo "Cloudflare config:"
            cat ~/.cloudflare/credentials 2>/dev/null || echo "No Cloudflare credentials file"
            echo ""
            echo "System temp directory:"
            ls -la /tmp/ | grep -i wrangler || echo "No wrangler temp files"
            echo ""
            echo "Recent system logs:"
            journalctl --no-pager -n 20 2>/dev/null || echo "Cannot access system logs"
            echo ""
            echo "Network connectivity test:"
            curl -I https://api.cloudflare.com/client/v4/user 2>&1 || echo "Cannot reach Cloudflare API"
            echo "============================="
            
            # Don't exit yet - continue to show more debug info
          fi
          
          echo ""
          echo "üìä DEPLOYMENT STATUS SUMMARY:"
          echo "============================="
          if [ "$deployment_success" = true ]; then
            echo "‚úÖ Deployment completed successfully"
            echo "Checking final deployment status:"
            npx wrangler deployments list --name ai-vibez || echo "Cannot list deployments"
          else
            echo "‚ùå Deployment failed - see error logs above"
            echo "Exit code: $deployment_exit_code"
          fi
          echo "============================="
          
          # Exit with original deployment exit code if it failed
          if [ "$deployment_success" != true ]; then
            exit $deployment_exit_code
          fi
          
      - name: üîë Secrets Management Debug (only if deployment succeeded)
        if: success()
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîë SECRETS MANAGEMENT DEBUG:"
          echo "============================"
          echo "Checking current Worker secrets..."
          npx wrangler secret list --name ai-vibez || echo "Failed to list secrets"
          echo ""
          echo "Attempting to set secrets..."
          
          # Function to try multiple secret setting methods with full error capture
          set_secret_with_full_debug() {
            local secret_name=$1
            local secret_value=$2
            
            echo "üîë Setting $secret_name..."
            echo "------------------------"
            
            # Clear logs before each attempt
            rm -f ~/.config/.wrangler/logs/*
            
            # Method 1: Workers secret
            echo "Trying Workers method..."
            if echo "$secret_value" | npx wrangler secret put "$secret_name" --name ai-vibez 2>&1; then
              echo "‚úÖ $secret_name set via Workers method"
              return 0
            else
              workers_exit_code=$?
              echo "‚ùå Workers method failed (exit code: $workers_exit_code)"
              
              # Show logs from this attempt
              for logfile in ~/.config/.wrangler/logs/*; do
                if [ -f "$logfile" ]; then
                  echo "Workers method error log:"
                  cat "$logfile"
                fi
              done
            fi
            
            # Clear logs before next attempt
            rm -f ~/.config/.wrangler/logs/*
            
            # Method 2: Pages secret with project name
            echo "Trying Pages method with project name..."
            if echo "$secret_value" | npx wrangler pages secret put "$secret_name" --project-name ai-vibez 2>&1; then
              echo "‚úÖ $secret_name set via Pages method (with project)"
              return 0
            else
              pages_exit_code=$?
              echo "‚ùå Pages method with project failed (exit code: $pages_exit_code)"
              
              # Show logs from this attempt
              for logfile in ~/.config/.wrangler/logs/*; do
                if [ -f "$logfile" ]; then
                  echo "Pages method error log:"
                  cat "$logfile"
                fi
              done
            fi
            
            echo "‚ùå All methods failed for $secret_name"
            echo "------------------------"
            return 1
          }
          
          # Only set non-empty secrets from GitHub
          [ -n "${{ secrets.GOOGLE_CLIENT_ID }}" ] && set_secret_with_full_debug "GOOGLE_CLIENT_ID" "${{ secrets.GOOGLE_CLIENT_ID }}"
          [ -n "${{ secrets.GOOGLE_CLIENT_SECRET }}" ] && set_secret_with_full_debug "GOOGLE_CLIENT_SECRET" "${{ secrets.GOOGLE_CLIENT_SECRET }}"
          [ -n "${{ secrets.JWT_SECRET }}" ] && set_secret_with_full_debug "JWT_SECRET" "${{ secrets.JWT_SECRET }}"
          [ -n "${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}" ] && set_secret_with_full_debug "GOOGLE_AI_STUDIO_API_KEY" "${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}"
          [ -n "${{ secrets.CLOUDFLARE_AI_GATEWAY_TOKEN }}" ] && set_secret_with_full_debug "CLOUDFLARE_AI_GATEWAY_TOKEN" "${{ secrets.CLOUDFLARE_AI_GATEWAY_TOKEN }}"
          [ -n "${{ secrets.SECRETS_ENCRYPTION_KEY }}" ] && set_secret_with_full_debug "SECRETS_ENCRYPTION_KEY" "${{ secrets.SECRETS_ENCRYPTION_KEY }}"
          [ -n "${{ secrets.WEBHOOK_SECRET }}" ] && set_secret_with_full_debug "WEBHOOK_SECRET" "${{ secrets.WEBHOOK_SECRET }}"
          
          echo ""
          echo "Final secret verification:"
          npx wrangler secret list --name ai-vibez || echo "Failed to verify final secrets"
          echo "============================"
          
      - name: üåê Final Deployment Verification
        if: success()
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üåê FINAL DEPLOYMENT VERIFICATION:"
          echo "================================="
          echo "Checking deployment status:"
          npx wrangler deployments list --name ai-vibez || echo "Failed to get deployments"
          echo ""
          echo "Testing deployment URLs:"
          echo "Primary domain: https://ai-vibez.com"
          curl -I https://ai-vibez.com 2>&1 || echo "Primary domain not accessible yet"
          echo ""
          echo "WWW domain: https://www.ai-vibez.com"  
          curl -I https://www.ai-vibez.com 2>&1 || echo "WWW domain not accessible yet"
          echo "================================="
          
      - name: üìä COMPREHENSIVE FINAL STATUS
        if: always()
        run: |
          echo "üìä COMPREHENSIVE FINAL STATUS:"
          echo "============================="
          echo "Workflow completed at: $(date)"
          echo "Overall job status: ${{ job.status }}"
          echo ""
          echo "üéØ Summary:"
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ All steps completed successfully!"
            echo "‚úÖ Your AI Vibez app should be live at https://ai-vibez.com"
            echo "‚úÖ OAuth authentication should be working"
            echo "‚úÖ Ready to create AI applications!"
          else
            echo "‚ùå Deployment encountered issues"
            echo "üìã Check the error logs above for specific details"
            echo "üîß Common fixes:"
            echo "   - Verify all secrets are set in GitHub and Cloudflare"
            echo "   - Check Cloudflare API token permissions"
            echo "   - Ensure account ID is correct"
          fi
          echo ""
          echo "üîç Next steps:"
          echo "1. Review any error messages above"
          echo "2. Visit https://ai-vibez.com to test"
          echo "3. Check Cloudflare Dashboard for deployment status"
          echo "4. Test OAuth login functionality"
          echo "============================="
