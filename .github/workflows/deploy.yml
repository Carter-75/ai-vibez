name: Deploy AI Vibez - FIX MIGRATIONS FOR LOGIN

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install
      - run: npm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'
          
      # CRITICAL: Clean up ALL Pages detection files
      - name: Force Workers Mode - Clean All Pages Files
        run: |
          echo "üßπ Forcing Workers mode by removing ALL Pages detection files..."
          rm -f dist/_routes.json
          rm -f _routes.json
          rm -rf functions/
          rm -rf pages/
          rm -f pages.json
          
          # Ensure we have a _worker.js file (required for Workers)
          if [ ! -f "dist/_worker.js" ]; then
            echo "‚ùå CRITICAL: dist/_worker.js missing - this will cause deployment failure"
            ls -la dist/
            exit 1
          else
            echo "‚úÖ dist/_worker.js exists - Workers mode confirmed"
          fi
          
      # Test API credentials first
      - name: Test Cloudflare API Access
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîê Testing Cloudflare API authentication..."
          if npx wrangler whoami; then
            echo "‚úÖ API authentication successful"
          else
            echo "‚ùå API authentication failed - check CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID"
            exit 1
          fi
          
      # Database migrations with correct ID
      - name: Database Migrations - FIXED
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üóÑÔ∏è Database Migration - Using CORRECT Database ID"
          echo "================================================="
          echo "Database name: ai-vibez-d1"
          echo "Correct Database ID: 88c494f1-1236-4ce4-8b60-570776559000"
          echo ""
          
          # Apply migrations using the CORRECT database ID
          echo "üîÑ Applying migrations with correct database ID..."
          if npx wrangler d1 migrations apply --database-id=88c494f1-1236-4ce4-8b60-570776559000 --remote; then
            echo "‚úÖ Migrations applied successfully"
          else
            echo "‚ö†Ô∏è Migration failed - trying by name as fallback..."
            if npx wrangler d1 migrations apply ai-vibez-d1 --remote; then
              echo "‚úÖ Migration by name succeeded"
            else
              echo "‚ùå Both migration methods failed - continuing anyway (may be already applied)"
            fi
          fi
          echo "================================================="
          
      # Deploy to Cloudflare Workers with explicit mode
      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üöÄ Deploying to Cloudflare Workers in WORKERS mode..."
          
          # Verify we're in Workers mode
          echo "üìã Pre-deployment verification:"
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Dist directory contents:"
          ls -la dist/
          echo ""
          
          # Deploy with explicit Workers config
          npx wrangler deploy --config wrangler.toml --compatibility-date 2024-10-02
          
      # Setup secrets - FIXED for Workers mode
      - name: Setup Workers Secrets - FORCED MODE
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîë Setting up Workers secrets (FORCED WORKERS MODE)..."
          
          # Force Workers mode by ensuring no Pages files exist
          rm -f dist/_routes.json _routes.json 2>/dev/null || true
          rm -rf functions/ pages/ 2>/dev/null || true
          
          # Set secrets for Workers (not Pages)
          echo "Setting GOOGLE_CLIENT_ID..."
          echo "${{ secrets.GOOGLE_CLIENT_ID }}" | npx wrangler secret put GOOGLE_CLIENT_ID --name ai-vibez --env production || echo "‚ö†Ô∏è Failed to set GOOGLE_CLIENT_ID"
          
          echo "Setting GOOGLE_CLIENT_SECRET..."
          echo "${{ secrets.GOOGLE_CLIENT_SECRET }}" | npx wrangler secret put GOOGLE_CLIENT_SECRET --name ai-vibez --env production || echo "‚ö†Ô∏è Failed to set GOOGLE_CLIENT_SECRET"
          
          echo "Setting JWT_SECRET..."
          echo "${{ secrets.JWT_SECRET }}" | npx wrangler secret put JWT_SECRET --name ai-vibez --env production || echo "‚ö†Ô∏è Failed to set JWT_SECRET"
          
          echo "Setting GOOGLE_AI_STUDIO_API_KEY..."
          echo "${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}" | npx wrangler secret put GOOGLE_AI_STUDIO_API_KEY --name ai-vibez --env production || echo "‚ö†Ô∏è Failed to set GOOGLE_AI_STUDIO_API_KEY"
          
          echo "Setting CLOUDFLARE_AI_GATEWAY_TOKEN..."
          echo "${{ secrets.CLOUDFLARE_AI_GATEWAY_TOKEN }}" | npx wrangler secret put CLOUDFLARE_AI_GATEWAY_TOKEN --name ai-vibez --env production || echo "‚ö†Ô∏è Failed to set CLOUDFLARE_AI_GATEWAY_TOKEN"
          
          echo "Setting SECRETS_ENCRYPTION_KEY..."
          echo "${{ secrets.SECRETS_ENCRYPTION_KEY }}" | npx wrangler secret put SECRETS_ENCRYPTION_KEY --name ai-vibez --env production || echo "‚ö†Ô∏è Failed to set SECRETS_ENCRYPTION_KEY"
          
          echo "Setting WEBHOOK_SECRET..."
          echo "${{ secrets.WEBHOOK_SECRET }}" | npx wrangler secret put WEBHOOK_SECRET --name ai-vibez --env production || echo "‚ö†Ô∏è Failed to set WEBHOOK_SECRET"
          
          echo "‚úÖ Workers secrets setup completed!"
          
      # Test login functionality with correct database ID
      - name: Test Login Functionality - FIXED
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîê TESTING LOGIN FUNCTIONALITY WITH CORRECT DATABASE"
          echo "=================================================="
          
          # Test database connectivity using correct ID
          echo "Testing database connectivity with ID: 88c494f1-1236-4ce4-8b60-570776559000..."
          if npx wrangler d1 execute --database-id=88c494f1-1236-4ce4-8b60-570776559000 --remote --command="SELECT 1 as test;"; then
            echo "‚úÖ Database connection successful"
            
            # Verify critical login tables exist
            echo "Verifying login tables exist..."
            echo "Checking for users table:"
            npx wrangler d1 execute --database-id=88c494f1-1236-4ce4-8b60-570776559000 --remote --command="SELECT name FROM sqlite_master WHERE type='table' AND name='users';" || echo "‚ùå Users table missing"
            
            echo "Checking for sessions table:"
            npx wrangler d1 execute --database-id=88c494f1-1236-4ce4-8b60-570776559000 --remote --command="SELECT name FROM sqlite_master WHERE type='table' AND name='sessions';" || echo "‚ùå Sessions table missing"
            
            echo "Checking for oauth_states table:"
            npx wrangler d1 execute --database-id=88c494f1-1236-4ce4-8b60-570776559000 --remote --command="SELECT name FROM sqlite_master WHERE type='table' AND name='oauth_states';" || echo "‚ùå OAuth states table missing"
            
            echo "‚úÖ Login functionality database test completed"
            
          else
            echo "‚ùå Database connection FAILED"
            echo "This will cause login functionality to NOT WORK"
            echo "Check that database with ID 88c494f1-1236-4ce4-8b60-570776559000 exists in your Cloudflare account"
          fi
          
          echo "=================================================="
          echo "üéâ DEPLOYMENT COMPLETED!"
          echo "üåê Visit: https://ai-vibez.com"
          echo "üîê Login functionality ready for testing!"
          echo "=================================================="
