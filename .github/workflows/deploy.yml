name: Deploy AI Vibez - WORKERS ONLY MODE

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install
      - run: npm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'
          
      # NUCLEAR OPTION: Force Workers Mode
      - name: NUCLEAR - Force Workers Mode
        run: |
          echo "üöÄ FORCING WORKERS MODE - NUCLEAR CLEANUP"
          
          # Delete ALL Pages-related files recursively
          find . -name "_routes.json" -type f -delete 2>/dev/null || true
          find . -name "functions" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "pages" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "pages.json" -type f -delete 2>/dev/null || true
          find . -name ".pages" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Remove specific files that cause Pages detection
          rm -rf dist/_routes.json dist/functions dist/pages 2>/dev/null || true
          rm -rf _routes.json functions/ pages/ pages.json .pages/ 2>/dev/null || true
          
          # Verify _worker.js exists
          if [ ! -f "dist/_worker.js" ]; then
            echo "‚ùå CRITICAL: dist/_worker.js missing"
            exit 1
          fi
          
          echo "‚úÖ Workers mode FORCED - all Pages files removed"
          
      # Test API credentials
      - name: Test Cloudflare API Access
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîê Testing API authentication..."
          npx wrangler whoami || exit 1
          
          echo "üìã Listing all D1 databases..."
          npx wrangler d1 list
          
      # Apply database migrations - FIXED SYNTAX
      - name: Database Migrations - FIXED SYNTAX
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üóÑÔ∏è Applying migrations to database..."
          echo "Database Name: ai-vibez-d1"
          echo "Database ID: 88c494f1-1236-4ce4-8b60-570776559000"
          
          # Apply migrations using CORRECT syntax (database name, not ID flag)
          if npx wrangler d1 migrations apply ai-vibez-d1 --remote; then
            echo "‚úÖ Migrations applied successfully"
          else
            echo "‚ö†Ô∏è Migration failed - may already be applied"
          fi
          
      # Deploy Workers with explicit config
      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üöÄ Deploying Workers..."
          
          # Final cleanup before deploy
          rm -rf dist/_routes.json dist/functions dist/pages 2>/dev/null || true
          
          # Deploy with explicit Workers configuration
          CLOUDFLARE_PAGES_PROJECT="" npx wrangler deploy --config wrangler.toml --compatibility-date 2024-10-02
          
      # SIMPLIFIED SECRET SETUP - Use wrangler (should work now)
      - name: Setup Workers Secrets - FIXED
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîë Setting up secrets using wrangler (Pages detection fixed)..."
          
          # Force clean environment
          rm -rf dist/_routes.json dist/functions dist/pages 2>/dev/null || true
          
          # Set secrets using wrangler (should work now that Pages detection is fixed)
          echo "Setting GOOGLE_CLIENT_ID..."
          echo "${{ secrets.GOOGLE_CLIENT_ID }}" | npx wrangler secret put GOOGLE_CLIENT_ID --name ai-vibez || echo "‚ö†Ô∏è Failed to set GOOGLE_CLIENT_ID"
          
          echo "Setting GOOGLE_CLIENT_SECRET..."
          echo "${{ secrets.GOOGLE_CLIENT_SECRET }}" | npx wrangler secret put GOOGLE_CLIENT_SECRET --name ai-vibez || echo "‚ö†Ô∏è Failed to set GOOGLE_CLIENT_SECRET"
          
          echo "Setting JWT_SECRET..."
          echo "${{ secrets.JWT_SECRET }}" | npx wrangler secret put JWT_SECRET --name ai-vibez || echo "‚ö†Ô∏è Failed to set JWT_SECRET"
          
          echo "Setting GOOGLE_AI_STUDIO_API_KEY..."
          echo "${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}" | npx wrangler secret put GOOGLE_AI_STUDIO_API_KEY --name ai-vibez || echo "‚ö†Ô∏è Failed to set GOOGLE_AI_STUDIO_API_KEY"
          
          echo "Setting CLOUDFLARE_AI_GATEWAY_TOKEN..."
          echo "${{ secrets.CLOUDFLARE_AI_GATEWAY_TOKEN }}" | npx wrangler secret put CLOUDFLARE_AI_GATEWAY_TOKEN --name ai-vibez || echo "‚ö†Ô∏è Failed to set CLOUDFLARE_AI_GATEWAY_TOKEN"
          
          echo "Setting SECRETS_ENCRYPTION_KEY..."
          echo "${{ secrets.SECRETS_ENCRYPTION_KEY }}" | npx wrangler secret put SECRETS_ENCRYPTION_KEY --name ai-vibez || echo "‚ö†Ô∏è Failed to set SECRETS_ENCRYPTION_KEY"
          
          echo "Setting WEBHOOK_SECRET..."
          echo "${{ secrets.WEBHOOK_SECRET }}" | npx wrangler secret put WEBHOOK_SECRET --name ai-vibez || echo "‚ö†Ô∏è Failed to set WEBHOOK_SECRET"
          
          echo "‚úÖ Secrets setup completed"
          
      # Comprehensive database and API diagnostics
      - name: Database and API Diagnostics - COMPREHENSIVE
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîç COMPREHENSIVE DIAGNOSTICS"
          echo "============================================="
          echo "Target Database ID: 88c494f1-1236-4ce4-8b60-570776559000"
          echo "Target Database Name: ai-vibez-d1"
          echo ""
          
          # 1. Test API token permissions
          echo "üîê Testing API token permissions..."
          npx wrangler whoami || echo "‚ùå API authentication failed"
          echo ""
          
          # 2. List all D1 databases to verify existence
          echo "üìã Listing all D1 databases..."
          npx wrangler d1 list || echo "‚ùå Cannot list D1 databases"
          echo ""
          
          # 3. Check if the specific database exists
          echo "üéØ Checking if our database exists..."
          if npx wrangler d1 list | grep -q "88c494f1-1236-4ce4-8b60-570776559000"; then
            echo "‚úÖ Database 88c494f1-1236-4ce4-8b60-570776559000 exists in account"
          else
            echo "‚ùå Database 88c494f1-1236-4ce4-8b60-570776559000 NOT found in account"
            echo "Available databases:"
            npx wrangler d1 list | grep -E "(Name|ID)" || echo "No databases found"
          fi
          echo ""
          
          # 4. Test database connection by name
          echo "üîå Testing database connection by name (ai-vibez-d1)..."
          if npx wrangler d1 execute ai-vibez-d1 --remote --command="SELECT 1 as test;"; then
            echo "‚úÖ Database connection by name successful"
            
            echo "üìä Checking database schema..."
            npx wrangler d1 execute ai-vibez-d1 --remote --command="SELECT name FROM sqlite_master WHERE type='table';" || echo "No tables found"
            
            echo "‚úÖ Database diagnostics completed successfully"
          else
            echo "‚ùå Database connection by name failed"
            
            # 5. Try alternative connection methods
            echo "üîÑ Trying database connection by ID..."
            if curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/d1/database/88c494f1-1236-4ce4-8b60-570776559000/query" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"sql": "SELECT 1 as test"}' | grep -q '"success":true'; then
              echo "‚úÖ Database connection via API successful"
            else
              echo "‚ùå Database connection via API also failed"
              echo "Possible issues:"
              echo "1. Database doesn't exist with ID 88c494f1-1236-4ce4-8b60-570776559000"
              echo "2. API token lacks D1 permissions"
              echo "3. Database is in wrong account"
            fi
          fi
          
          echo "============================================="
          echo "üéâ DEPLOYMENT COMPLETED!"
          echo "üåê Visit: https://ai-vibez.com"
          echo "üìã Check diagnostics above for any issues"
          echo "============================================="
