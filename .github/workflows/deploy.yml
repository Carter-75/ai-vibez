name: Deploy AI Vibez to Cloudflare

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - run: npm install
      
      - run: npm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'
          
      # Set up authentication for wrangler commands
      - name: Setup Cloudflare credentials
        run: |
          echo "Setting up Cloudflare authentication..."
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_ENV
          
      # Debug Cloudflare setup
      - name: Debug Cloudflare setup
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîç Debugging Cloudflare setup..."
          echo "Account ID (first 8 chars): $(echo $CLOUDFLARE_ACCOUNT_ID | cut -c1-8)..."
          echo "API Token (first 8 chars): $(echo $CLOUDFLARE_API_TOKEN | cut -c1-8)..."
          echo "Wrangler version: $(npx wrangler --version)"
          echo "Testing wrangler authentication..."
          npx wrangler whoami || echo "Authentication test failed"
          
          # Check what type of project Cloudflare thinks this is
          echo "üìã Checking project type detection..."
          npx wrangler pages project list || echo "No Pages projects or command failed"
          echo "üìã Checking Workers..."
          npx wrangler deployments list || echo "No Workers deployments or command failed"
          
      # Clean up Pages-related files that confuse wrangler
      - name: Clean up Pages detection files
        run: |
          echo "üßπ Cleaning up files that cause Pages detection..."
          rm -f dist/_routes.json
          rm -rf functions/
          echo "Files removed. This should be detected as a Workers project now."
          
      # Ensure D1 database exists and run migrations
      - name: Setup D1 database and run migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Setting up D1 database..."
          
          # List all databases to check what's available
          echo "üìã Listing all D1 databases..."
          npx wrangler d1 list || echo "Failed to list databases"
          
          # Try to run migrations by database name first
          echo "üîÑ Attempting to apply migrations to ai-vibez-d1 by name..."
          if npx wrangler d1 migrations apply ai-vibez-d1 --remote; then
            echo "‚úÖ Migrations applied successfully via database name"
          else
            echo "‚ö†Ô∏è  Migration by name failed, trying by database ID..."
            # Try by database ID from wrangler.toml
            if npx wrangler d1 migrations apply --database-id=88c494f1-1236-4ce4-8b60-570776559000 --remote; then
              echo "‚úÖ Migrations applied successfully via database ID"
            else
              echo "‚ö†Ô∏è  Both migration attempts failed"
              echo "This might mean:"
              echo "1. Database doesn't exist yet - create it in Cloudflare Dashboard"
              echo "2. Migrations already applied"
              echo "3. Permission issues"
              echo "Continuing with deployment anyway..."
            fi
          fi
          
      # Deploy the application (try Workers first, then Pages as fallback)
      - uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --config wrangler.toml
          
      # Set up secrets with hybrid approach (try both Workers and Pages)
      - name: Setup application secrets (hybrid approach)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîß Setting up secrets with hybrid approach..."
          echo "Will try both Workers and Pages secret commands to ensure compatibility"
          
          # Function to set secret with both methods
          set_secret() {
            local secret_name=$1
            local secret_value=$2
            
            echo "üîë Setting $secret_name..."
            
            # Try Workers method first
            if echo "$secret_value" | npx wrangler secret put "$secret_name" --name ai-vibez 2>/dev/null; then
              echo "‚úÖ $secret_name set via Workers method"
              return 0
            fi
            
            # Try Pages method as fallback
            if echo "$secret_value" | npx wrangler pages secret put "$secret_name" --project-name ai-vibez 2>/dev/null; then
              echo "‚úÖ $secret_name set via Pages method"
              return 0
            fi
            
            # Try Pages method with different project name
            if echo "$secret_value" | npx wrangler pages secret put "$secret_name" 2>/dev/null; then
              echo "‚úÖ $secret_name set via Pages method (default project)"
              return 0
            fi
            
            echo "‚ö†Ô∏è  Failed to set $secret_name with any method"
            return 1
          }
          
          # Set all secrets using the hybrid function
          set_secret "GOOGLE_AI_STUDIO_API_KEY" "${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}"
          set_secret "CLOUDFLARE_AI_GATEWAY_TOKEN" "${{ secrets.CLOUDFLARE_AI_GATEWAY_TOKEN }}"
          set_secret "JWT_SECRET" "${{ secrets.JWT_SECRET }}"
          set_secret "WEBHOOK_SECRET" "${{ secrets.WEBHOOK_SECRET }}"
          set_secret "SECRETS_ENCRYPTION_KEY" "${{ secrets.SECRETS_ENCRYPTION_KEY }}"
          set_secret "GOOGLE_CLIENT_ID" "${{ secrets.GOOGLE_CLIENT_ID }}"
          set_secret "GOOGLE_CLIENT_SECRET" "${{ secrets.GOOGLE_CLIENT_SECRET }}"
          
          echo "‚úÖ Secret setup completed with hybrid approach"
